// Code generated by protoc-gen-go. DO NOT EDIT.
// source: echotest/echotest.proto

package echotest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Echomessage struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Echomessage) Reset()         { *m = Echomessage{} }
func (m *Echomessage) String() string { return proto.CompactTextString(m) }
func (*Echomessage) ProtoMessage()    {}
func (*Echomessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_echotest_81b5225afe1efe09, []int{0}
}
func (m *Echomessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Echomessage.Unmarshal(m, b)
}
func (m *Echomessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Echomessage.Marshal(b, m, deterministic)
}
func (dst *Echomessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Echomessage.Merge(dst, src)
}
func (m *Echomessage) XXX_Size() int {
	return xxx_messageInfo_Echomessage.Size(m)
}
func (m *Echomessage) XXX_DiscardUnknown() {
	xxx_messageInfo_Echomessage.DiscardUnknown(m)
}

var xxx_messageInfo_Echomessage proto.InternalMessageInfo

func (m *Echomessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Echomessage)(nil), "echotest.Echomessage")
}

func init() { proto.RegisterFile("echotest/echotest.proto", fileDescriptor_echotest_81b5225afe1efe09) }

var fileDescriptor_echotest_81b5225afe1efe09 = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0x4d, 0xce, 0xc8,
	0x2f, 0x49, 0x2d, 0x2e, 0xd1, 0x87, 0x31, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38, 0x60,
	0x7c, 0x29, 0x99, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0xfd, 0xc4, 0x82, 0x4c, 0xfd, 0xc4, 0xbc,
	0xbc, 0xfc, 0x92, 0xc4, 0x92, 0xcc, 0xfc, 0xbc, 0x62, 0x88, 0x3a, 0x25, 0x65, 0x2e, 0x6e, 0xd7,
	0xe4, 0x8c, 0xfc, 0xdc, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x21, 0x11, 0x2e, 0xd6, 0xb2, 0xc4,
	0x9c, 0xd2, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x08, 0xc7, 0x28, 0x02, 0xa2, 0xa8,
	0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0xc8, 0x93, 0x8b, 0x05, 0xc4, 0x15, 0x12, 0xd5, 0x83,
	0x5b, 0x8a, 0x64, 0x86, 0x14, 0x76, 0x61, 0x25, 0xe1, 0xa6, 0xcb, 0x4f, 0x26, 0x33, 0xf1, 0x2a,
	0x71, 0xe8, 0x97, 0x19, 0x82, 0x5d, 0x6b, 0xc5, 0xa8, 0x95, 0xc4, 0x06, 0x76, 0x85, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0x28, 0xe2, 0x6f, 0x97, 0xc8, 0x00, 0x00, 0x00,
}
